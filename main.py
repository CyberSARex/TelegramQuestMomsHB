import logging, asyncio, time, random, datetime

from data import API_TOKEN, answers, user_database, quizQA, parkIMG
from aiogram import Bot, Dispatcher, executor, types

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

## –°—Ç–∞—Ä—Ç ##
@dp.message_handler(commands=['start'])
async def welcomingFunc(message: types.Message):
    ## –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ##
    await bot.send_chat_action(message.chat.id, 'typing')
    await asyncio.sleep(2.5)
    await message.answer(answers.get("starting"))

    ## –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–∞" ##
    inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
    btnReady = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–∞!", callback_data='rdyBtn')
    inline_keyboard.add(btnReady)

    await asyncio.sleep(15)
    await message.answer("–¢—ã –≥–æ—Ç–æ–≤–∞? (–ù–∞–∂–º–∏ –∫–æ–≥–¥–∞ –æ–¥–µ–Ω–µ—à—å—Å—è!) ü§ó", reply_markup=inline_keyboard)
    
    ## –°—Ç–∞–≤–∏–º rdyBtnPressed –Ω–∞ False –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [0] ##
    user_id = message.from_user.id
    if user_id in user_database:
        del user_database[user_id]

    user_database[user_id] = [False]


## –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ##
@dp.callback_query_handler(lambda query: query.data == "rdyBtn")
async def rdyBtnHandler(query: types.CallbackQuery):
    user_id = query.from_user.id
    chat_id = query.message.chat.id
    if not user_database[user_id][0]:
        user_database[user_id][0] = True

        ## –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [1] ##
        user_database[user_id].append(time.time())

        ## –ü—Ä–æ—Å—Ç–µ–Ω—å–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ ##
        await asyncio.sleep(0.2)
        await bot.send_message(chat_id, answers.get("quiz"))
        
        quiz_keyboard = types.InlineKeyboardMarkup(row_width=1)
        user_database[user_id].append([f"w{i}" for i in range(len(quizQA)*2)]) # wBtnList - [2]
        user_database[user_id].append(user_database[user_id][2].copy()) # wBtnListEditable - [3]

        wBtnList = user_database[user_id][3]

        for question, possible_answers in quizQA.items():
            rans, wans1, wans2 = possible_answers
            
            rkbutton = types.InlineKeyboardButton(rans, callback_data="Q1RightOPT")
            wkbutton1 = types.InlineKeyboardButton(wans1, callback_data=wBtnList[0])
            wBtnList.pop(0)
            wkbutton2 = types.InlineKeyboardButton(wans2, callback_data=wBtnList[0])
            wBtnList.pop(0)
            btnList = [rkbutton, wkbutton1, wkbutton2]
            random.shuffle(btnList)
            quiz_keyboard.add(*btnList)
            break

        await asyncio.sleep(3)
        await bot.send_message(chat_id, f"[1/{len(quizQA)}] {question}", reply_markup=quiz_keyboard)
        user_database[user_id].append([False]) # Q1 button - False [4][0]

@dp.callback_query_handler(lambda query: query.data in user_database[query.from_user.id][2])
async def wrongQuizAnswer(query: types.CallbackQuery):
    await query.answer("–ù–µ-–∞! ‚ùå –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë üîÑ")

@dp.callback_query_handler(lambda query: query.data in [f"Q{i}RightOPT" for i in range(1, len(quizQA)+1)])
async def rightQuizAnswer(query: types.CallbackQuery):
    quiz_keyboard = types.InlineKeyboardMarkup(row_width=1)
    user_id = query.from_user.id
    chat_id = query.message.chat.id
    quizLen = len(quizQA)
    wBtnList = user_database[user_id][3]

    for ind, data in enumerate(quizQA.items()):
        if ind == 0:
            continue

        if query.data == f"Q{quizLen}RightOPT" and not user_database[user_id][4][quizLen-1]:
            user_database[user_id][4][quizLen-1] = True
            await asyncio.sleep(0.2)
            await bot.send_message(chat_id, answers.get("house"))
            user_database[user_id].append(False)
            break

        if query.data == f"Q{ind}RightOPT" and not user_database[user_id][4][ind-1]:
            user_database[user_id][4][ind-1] = True
            question, possible_answers = data
            rans, wans1, wans2 = possible_answers

            rkbutton = types.InlineKeyboardButton(rans, callback_data=f"Q{ind+1}RightOPT")
            wkbutton1 = types.InlineKeyboardButton(wans1, callback_data=wBtnList[0])
            wBtnList.pop(0)
            wkbutton2 = types.InlineKeyboardButton(wans2, callback_data=wBtnList[0])
            wBtnList.pop(0)
            btnList = [rkbutton, wkbutton1, wkbutton2]
            random.shuffle(btnList)
            quiz_keyboard.add(*btnList)

            await asyncio.sleep(0.6)
            await bot.send_message(chat_id, f"[{ind+1}/{quizLen}] {question}", reply_markup=quiz_keyboard)
            user_database[user_id][4].append(False)
            break


## –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É ##
@dp.message_handler()
async def answerMessages(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if user_id not in user_database:
        return
    
    if message.text.lower() == "–∫—Ä—ã—à–∫–∞" and not user_database[user_id][5]:
        user_database[user_id][5] = True
        await message.reply(answers.get("lid"))

        await bot.send_chat_action(chat_id, 'typing')
        await asyncio.sleep(5)
        await message.answer(answers.get("minipark"))
        await asyncio.sleep(10)
        await message.answer(answers.get("sending"))

        support_keyboard = types.InlineKeyboardMarkup(row_width=1)
        support_keyboard.add(types.InlineKeyboardButton("üóùÔ∏è –ü–û–î–°–ö–ê–ó–ö–ê üóùÔ∏è", callback_data="SupportBtn"))
        
        await bot.send_chat_action(chat_id, 'upload_photo')
        with open("img//park.jpg", "rb") as picPark1:
            await message.answer_photo(picPark1, caption="–ü–æ–Ω—è–ª–∞ —Å—Ä–∞–∑—É? –ò–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞?", reply_markup=support_keyboard)

        user_database[user_id].append(1) # PhotoIndex [6]
        user_database[user_id].append(False) # SelfieSent? [7]

    elif (message.text.lower() == "–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å" or message.text.lower() == "continental") and not user_database[user_id][8]:
        user_database[user_id][8] = True
        await message.reply(answers.get("continental"))
        await bot.send_chat_action(chat_id, "upload_photo")
        await asyncio.sleep(2.25)
        with open("img//continental.jpg", "rb") as picContinental1:
            await message.answer_photo(picContinental1, caption=answers.get("continental1"))

    elif message.text.lower() == "20 –ø–∏—Ü—Ü–∞":
        start = user_database[user_id][1]
        end = time.time()
        final_time = int(end - start)
        final_time_readable = datetime.timedelta(seconds=final_time)
        await asyncio.sleep(0.4)
        await message.reply(f"–ò–º–µ–Ω–Ω–æ —Ç–∞–∫! üíØüíØüíØ\n\n–¢—ã —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å —Å –Ω–∞—à–∏–º –∫–≤–µ—Å—Ç–æ–º –∏ –≤ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–∞–∑ –¥–æ–∫–∞–∑–∞–ª–∞, –∫–∞–∫–∞—è –∂–µ —Ç—ã —É –Ω–∞—Å —É–º–Ω–∞—è! üß†üî•\n\n–ú—ã –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ —Ç–µ–±—è –ª—é–±–∏–º! ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è\n–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, –ú–∞–º–æ—á–∫–∞ ü•≥\n\n–°–µ–π—á–∞—Å —è —Å–∫–∏–Ω—É —Ç–µ–±–µ –ª–æ–∫–∞—Ü–∏—é –ø–∏—Ü—Ü–µ—Ä–∏–∏, –∫—É–¥–∞ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –¥–∞–ª—å—à–µ ü•∞\n\n–ù–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å –Ω–∞—à–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—à—å –≤ –ø–∏—Ü—Ü–µ—Ä–∏—é! ü§´\n\n–í—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –ø—Ä–æ—à–ª–∞ –∫–≤–µ—Å—Ç: {final_time_readable} ü§Ø\n\n–ù–∞–¥ —Ç–≤–æ–∏–º –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è —Ç—Ä—É–¥–∏–ª–∏—Å—å:\n‚Ä¢ –†–æ–º—á–∏–∫, –ª—é–±–∏–º—ã–π —Å—ã–Ω\n‚Ä¢ –°–µ—Ä—ë–∂–∞, –ª—é–±–∏–º—ã–π –∂—É–º\n‚Ä¢ –ö–∞—Ç—è, –ª—é–±–∏–º–∞—è —Å–µ—Å—Ç—Ä–∞\n‚Ä¢ –ë–æ–≥–¥–∞–Ω, –¥—Ä—É–≥ –†–æ–º–∫–∏")
        await asyncio.sleep(10)
        await bot.send_chat_action(chat_id, "find_location")
        await asyncio.sleep(6)
        await message.answer_location(latitude=45.789202, longitude=24.142178)

@dp.callback_query_handler(lambda query: query.data == "SupportBtn")
async def sendSupportPictures(query: types.CallbackQuery):
    user_id = query.from_user.id
    chat_id = query.message.chat.id
    picID = user_database[user_id][6]
    user_database[user_id][6] += 1

    if len(parkIMG) < picID:
        await bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–æ—Ç–æ ‚ùåüñºÔ∏è")
    else:
        await bot.send_message(chat_id, "–ö–æ–Ω–µ—á–Ω–æ! –õ–æ–≤–∏ —Ñ–æ—Ç–∫—É! üòú")
        await bot.send_chat_action(chat_id, 'upload_photo')
        picPath = f"img//park{picID}.jpg"
        with open(picPath, "rb") as picParkSupport:
            await bot.send_photo(chat_id, picParkSupport)


## –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–µ–ª—Ñ–∏ –æ—Ç –º–∞–º—ã ##
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def answerToPhoto(message: types.Message):
    user_id = message.from_user.id
    if not user_database[user_id][7]:
        user_database[user_id][7] = True
        
        await asyncio.sleep(0.75)
        await message.reply(answers.get("selfie"))
        await asyncio.sleep(0.8)
        await message.answer(answers.get("selfie1"))
        await bot.send_chat_action(message.chat.id, "find_location")
        await asyncio.sleep(4)
        await message.answer_location(latitude=45.7982, longitude=24.151611)

        continue_keyboard = types.InlineKeyboardMarkup(row_width=1)
        continue_keyboard.add(types.InlineKeyboardButton("–ù–∞—à–ª–∞!", callback_data="FindBtn"))
        await bot.send_chat_action(message.chat.id, 'upload_photo')
        await asyncio.sleep(2)
        with open("img//stairs.jpg", "rb") as picStairs1:
            await message.answer_photo(picStairs1, caption="–ù–∞–∂–º—ë—à—å –∫–Ω–æ–ø–∫—É '–Ω–∞—à–ª–∞', –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–µ—à—å –Ω–∞ –º–µ—Å—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ!", reply_markup=continue_keyboard)
        user_database[user_id].append(False) # [8]

@dp.callback_query_handler(lambda query: query.data in ["FindBtn", "foundNumBtn"])
async def sendContinuePicture(query: types.CallbackQuery):
    chat_id = query.message.chat.id
    if query.data == "FindBtn":
        await asyncio.sleep(0.2)
        await bot.send_message(chat_id, answers.get("stairs"))
        await bot.send_chat_action(chat_id, 'upload_photo')
        await asyncio.sleep(1.5)
        with open("img//stairs1.jpg", "rb") as picStairs2:
            await bot.send_photo(chat_id, picStairs2, caption=answers.get("stairs1"))
        foundNumber_keyboard = types.InlineKeyboardMarkup(row_width=1)
        foundNumber_keyboard.add(types.InlineKeyboardButton("–í–∏–∂—É —á–∏—Å–ª–æ!", callback_data="foundNumBtn"))
        await asyncio.sleep(3)
        await bot.send_message(chat_id, '–°—Ç–æ—è —Ç–∞–º, —Ç—ã –¥–æ–ª–∂–Ω–∞ –æ–≥–ª—è–Ω—É—Ç—å—Å—è –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º –∏ –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ "1868" üîçüßê', reply_markup=foundNumber_keyboard)

    elif query.data == "foundNumBtn":
        await asyncio.sleep(0.2)
        await bot.send_message(chat_id, answers.get("stairs2"))
        await asyncio.sleep(2.25)
        with open("img//stairs2.jpg", "rb") as picStairs3:
            await bot.send_photo(chat_id, picStairs3, caption="–°—Ç–æ—è —Ç–∞–∫, –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ, –ø–æ–≤–µ—Ä–Ω–∏ –≥–æ–ª–æ–≤—É –Ω–∞ 90¬∞ –≤–ª–µ–≤–æ, –≤ —Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –ª–µ–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∞—è –±—É–º–∞–∂–∫–∞! üéâ")
        


def main():
    executor.start_polling(dp, skip_updates=True)

if __name__ == "__main__":
    main()